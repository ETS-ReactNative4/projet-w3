scalar Date

type Query {
  getPlaces: [Place]
  getUsers: [User]
  getCompanies: [Company]
}

type Mutation {
  updateHour(id: ID!, day: Day!, start: String!, end: String!): Place

  createUser(
    name: String!
    email: String!
    password: String!
    role: Role!
  ): User

  createCompany(name: String!, email: String): Company

  createPlace(
    name: String!
    number: Int
    street: String
    zipCode: Int
    type: String
    category: Category
  ): Place

  login(email: String!, password: String!): AuthPayload

  deletePlace(id: ID!): Place
  deleteCompany(id: ID!): Company
  deleteUser(id: ID!): User
}

type User {
  id: ID!
  name: String
  email: String
  password: String
  role: Role
}

type Place {
  id: ID!
  name: String
  address: Address
  hours: [Hour!]
  keywords: [String!]
  category: Category
  type: String
}

type Company {
  id: ID!
  name: String
  email: String
}

type AuthPayload {
  token: String
  user: User
}

type Address {
  number: Int
  street: String
  zipCode: Int
}

type Hour {
  day: Day
  start: String
  end: String
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Category {
  FOOD
  SHOP
  ACTIVITY
}

enum Vegan {
  VG
  VGN
  VGF
}

enum Bio {
  NO
  PARTIAL
  FULL
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  USER
}
