module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Address {
  number: Int
  street: String
  zip_code: Int
}

input AddressCreateInput {
  number: Int
  street: String
  zip_code: Int
}

input AddressCreateOneInput {
  create: AddressCreateInput
}

input AddressUpdateDataInput {
  number: Int
  street: String
  zip_code: Int
}

input AddressUpdateOneInput {
  create: AddressCreateInput
  update: AddressUpdateDataInput
  upsert: AddressUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
}

input AddressUpsertNestedInput {
  update: AddressUpdateDataInput!
  create: AddressCreateInput!
}

input AddressWhereInput {
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  street: String
  street_not: String
  street_in: [String!]
  street_not_in: [String!]
  street_lt: String
  street_lte: String
  street_gt: String
  street_gte: String
  street_contains: String
  street_not_contains: String
  street_starts_with: String
  street_not_starts_with: String
  street_ends_with: String
  street_not_ends_with: String
  zip_code: Int
  zip_code_not: Int
  zip_code_in: [Int!]
  zip_code_not_in: [Int!]
  zip_code_lt: Int
  zip_code_lte: Int
  zip_code_gt: Int
  zip_code_gte: Int
  AND: [AddressWhereInput!]
}

type AggregateHour {
  count: Int!
}

type AggregatePlace {
  count: Int!
}

type AggregateType {
  count: Int!
}

type BatchPayload {
  count: Long!
}

enum Category {
  FOOD
  SHOP
  ACTIVITY
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

type Hour {
  id: ID!
  day: Day
  start: String
  end: String
}

type HourConnection {
  pageInfo: PageInfo!
  edges: [HourEdge]!
  aggregate: AggregateHour!
}

input HourCreateInput {
  id: ID
  day: Day
  start: String
  end: String
}

input HourCreateManyInput {
  create: [HourCreateInput!]
  connect: [HourWhereUniqueInput!]
}

type HourEdge {
  node: Hour!
  cursor: String!
}

enum HourOrderByInput {
  id_ASC
  id_DESC
  day_ASC
  day_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
}

type HourPreviousValues {
  id: ID!
  day: Day
  start: String
  end: String
}

input HourScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  day: Day
  day_not: Day
  day_in: [Day!]
  day_not_in: [Day!]
  start: String
  start_not: String
  start_in: [String!]
  start_not_in: [String!]
  start_lt: String
  start_lte: String
  start_gt: String
  start_gte: String
  start_contains: String
  start_not_contains: String
  start_starts_with: String
  start_not_starts_with: String
  start_ends_with: String
  start_not_ends_with: String
  end: String
  end_not: String
  end_in: [String!]
  end_not_in: [String!]
  end_lt: String
  end_lte: String
  end_gt: String
  end_gte: String
  end_contains: String
  end_not_contains: String
  end_starts_with: String
  end_not_starts_with: String
  end_ends_with: String
  end_not_ends_with: String
  AND: [HourScalarWhereInput!]
  OR: [HourScalarWhereInput!]
  NOT: [HourScalarWhereInput!]
}

type HourSubscriptionPayload {
  mutation: MutationType!
  node: Hour
  updatedFields: [String!]
  previousValues: HourPreviousValues
}

input HourSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HourWhereInput
  AND: [HourSubscriptionWhereInput!]
}

input HourUpdateDataInput {
  day: Day
  start: String
  end: String
}

input HourUpdateInput {
  day: Day
  start: String
  end: String
}

input HourUpdateManyDataInput {
  day: Day
  start: String
  end: String
}

input HourUpdateManyInput {
  create: [HourCreateInput!]
  update: [HourUpdateWithWhereUniqueNestedInput!]
  upsert: [HourUpsertWithWhereUniqueNestedInput!]
  delete: [HourWhereUniqueInput!]
  connect: [HourWhereUniqueInput!]
  set: [HourWhereUniqueInput!]
  disconnect: [HourWhereUniqueInput!]
  deleteMany: [HourScalarWhereInput!]
  updateMany: [HourUpdateManyWithWhereNestedInput!]
}

input HourUpdateManyMutationInput {
  day: Day
  start: String
  end: String
}

input HourUpdateManyWithWhereNestedInput {
  where: HourScalarWhereInput!
  data: HourUpdateManyDataInput!
}

input HourUpdateWithWhereUniqueNestedInput {
  where: HourWhereUniqueInput!
  data: HourUpdateDataInput!
}

input HourUpsertWithWhereUniqueNestedInput {
  where: HourWhereUniqueInput!
  update: HourUpdateDataInput!
  create: HourCreateInput!
}

input HourWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  day: Day
  day_not: Day
  day_in: [Day!]
  day_not_in: [Day!]
  start: String
  start_not: String
  start_in: [String!]
  start_not_in: [String!]
  start_lt: String
  start_lte: String
  start_gt: String
  start_gte: String
  start_contains: String
  start_not_contains: String
  start_starts_with: String
  start_not_starts_with: String
  start_ends_with: String
  start_not_ends_with: String
  end: String
  end_not: String
  end_in: [String!]
  end_not_in: [String!]
  end_lt: String
  end_lte: String
  end_gt: String
  end_gte: String
  end_contains: String
  end_not_contains: String
  end_starts_with: String
  end_not_starts_with: String
  end_ends_with: String
  end_not_ends_with: String
  AND: [HourWhereInput!]
}

input HourWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createHour(data: HourCreateInput!): Hour!
  updateHour(data: HourUpdateInput!, where: HourWhereUniqueInput!): Hour
  updateManyHours(data: HourUpdateManyMutationInput!, where: HourWhereInput): BatchPayload!
  upsertHour(where: HourWhereUniqueInput!, create: HourCreateInput!, update: HourUpdateInput!): Hour!
  deleteHour(where: HourWhereUniqueInput!): Hour
  deleteManyHours(where: HourWhereInput): BatchPayload!
  createPlace(data: PlaceCreateInput!): Place!
  updatePlace(data: PlaceUpdateInput!, where: PlaceWhereUniqueInput!): Place
  updateManyPlaces(data: PlaceUpdateManyMutationInput!, where: PlaceWhereInput): BatchPayload!
  upsertPlace(where: PlaceWhereUniqueInput!, create: PlaceCreateInput!, update: PlaceUpdateInput!): Place!
  deletePlace(where: PlaceWhereUniqueInput!): Place
  deleteManyPlaces(where: PlaceWhereInput): BatchPayload!
  createType(data: TypeCreateInput!): Type!
  updateType(data: TypeUpdateInput!, where: TypeWhereUniqueInput!): Type
  updateManyTypes(data: TypeUpdateManyMutationInput!, where: TypeWhereInput): BatchPayload!
  upsertType(where: TypeWhereUniqueInput!, create: TypeCreateInput!, update: TypeUpdateInput!): Type!
  deleteType(where: TypeWhereUniqueInput!): Type
  deleteManyTypes(where: TypeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Place {
  id: ID!
  name: String
  address: Address
  hours(where: HourWhereInput, orderBy: HourOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hour!]
  keywords: [String!]!
  category: Category
  type: Type
}

type PlaceConnection {
  pageInfo: PageInfo!
  edges: [PlaceEdge]!
  aggregate: AggregatePlace!
}

input PlaceCreateInput {
  id: ID
  name: String
  address: AddressCreateOneInput
  hours: HourCreateManyInput
  keywords: PlaceCreatekeywordsInput
  category: Category
  type: TypeCreateOneInput
}

input PlaceCreatekeywordsInput {
  set: [String!]
}

type PlaceEdge {
  node: Place!
  cursor: String!
}

enum PlaceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  category_ASC
  category_DESC
}

type PlacePreviousValues {
  id: ID!
  name: String
  keywords: [String!]!
  category: Category
}

type PlaceSubscriptionPayload {
  mutation: MutationType!
  node: Place
  updatedFields: [String!]
  previousValues: PlacePreviousValues
}

input PlaceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlaceWhereInput
  AND: [PlaceSubscriptionWhereInput!]
}

input PlaceUpdateInput {
  name: String
  address: AddressUpdateOneInput
  hours: HourUpdateManyInput
  keywords: PlaceUpdatekeywordsInput
  category: Category
  type: TypeUpdateOneInput
}

input PlaceUpdatekeywordsInput {
  set: [String!]
}

input PlaceUpdateManyMutationInput {
  name: String
  keywords: PlaceUpdatekeywordsInput
  category: Category
}

input PlaceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: AddressWhereInput
  hours_some: HourWhereInput
  category: Category
  category_not: Category
  category_in: [Category!]
  category_not_in: [Category!]
  type: TypeWhereInput
  AND: [PlaceWhereInput!]
}

input PlaceWhereUniqueInput {
  id: ID
}

type Query {
  hour(where: HourWhereUniqueInput!): Hour
  hours(where: HourWhereInput, orderBy: HourOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hour]!
  hoursConnection(where: HourWhereInput, orderBy: HourOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HourConnection!
  place(where: PlaceWhereUniqueInput!): Place
  places(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Place]!
  placesConnection(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaceConnection!
  type(where: TypeWhereUniqueInput!): Type
  types(where: TypeWhereInput, orderBy: TypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Type]!
  typesConnection(where: TypeWhereInput, orderBy: TypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TypeConnection!
  node(id: ID!): Node
}

type Subscription {
  hour(where: HourSubscriptionWhereInput): HourSubscriptionPayload
  place(where: PlaceSubscriptionWhereInput): PlaceSubscriptionPayload
  type(where: TypeSubscriptionWhereInput): TypeSubscriptionPayload
}

type Type {
  id: ID!
  name: String
}

type TypeConnection {
  pageInfo: PageInfo!
  edges: [TypeEdge]!
  aggregate: AggregateType!
}

input TypeCreateInput {
  id: ID
  name: String
}

input TypeCreateOneInput {
  create: TypeCreateInput
  connect: TypeWhereUniqueInput
}

type TypeEdge {
  node: Type!
  cursor: String!
}

enum TypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type TypePreviousValues {
  id: ID!
  name: String
}

type TypeSubscriptionPayload {
  mutation: MutationType!
  node: Type
  updatedFields: [String!]
  previousValues: TypePreviousValues
}

input TypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TypeWhereInput
  AND: [TypeSubscriptionWhereInput!]
}

input TypeUpdateDataInput {
  name: String
}

input TypeUpdateInput {
  name: String
}

input TypeUpdateManyMutationInput {
  name: String
}

input TypeUpdateOneInput {
  create: TypeCreateInput
  update: TypeUpdateDataInput
  upsert: TypeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: TypeWhereUniqueInput
}

input TypeUpsertNestedInput {
  update: TypeUpdateDataInput!
  create: TypeCreateInput!
}

input TypeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TypeWhereInput!]
}

input TypeWhereUniqueInput {
  id: ID
}
`
      }
    